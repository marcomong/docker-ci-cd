version: 2
jobs:
  build:
    working_directory: /app
    docker:
      - image: docker:17.05.0-ce-git

    environment:
      NODE_ENV: production
      TARGET: prod

    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app/ ./backend
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t app ./ui
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      # - run:
      #     name: Run tests
      #     command: |
      #       docker-compose -f ./docker-compose.test.yml up

      - run:
          name: create containers
          command: |
            docker-compose build
      - deploy:
          name: Push application Docker image
          command: |
            docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
            docker-compose push

# version: 2
# jobs:
#   build:
#     docker:
#       - image: docker:17.05.0-ce-git

#     working_directory: ~/app
    
#     environment:
#       NODE_ENV: development
#       TARGET: dev

#     steps:
#       - checkout
#       - setup_remote_docker
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --no-cache \
#               py-pip=9.0.0-r1
#             pip install \
#               docker-compose==1.12.0 \
#               awscli==1.11.76
#       - run:
#           name: Run unit tests
#           command: echo 'running tests here'

#       - deploy:
#           name: Push application Docker image
#           command: |
#             docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
#             docker-compose push
                
#     # environment:
#     #   NODE_ENV: development
#     #   TARGET: dev

#     # steps:
#     #   - checkout
#     #   - run:
#     #       name: Run unit tests
#     #       command: echo 'running tests here'

#     #   - run:
#     #       name: Install Docker client
#     #       command: |
#     #         set -x
#     #         VER="17.03.0-ce"
#     #         curl -L -o /tmp/docker-$VER.tgz https://get.docker.com/builds/Linux/x86_64/docker-$VER.tgz
#     #         tar -xz -C /tmp -f /tmp/docker-$VER.tgz
#     #         mv /tmp/docker/* /usr/bin
      
#     #   - run:
#     #       name: Start container and verify it's working
#     #       command: |
#     #         set -x
#     #         docker-compose up -d
#     #         # docker-compose will start 2 containers, the one with service will be named `contacts`
#     #         # we start another container with curl in the same network as `contacts`, this way we have
#     #         # all exposed ports from `contacts` available on `localhost` in this new container
#     #         docker run --network container:contacts \
#     #           appropriate/curl --retry 10 --retry-delay 1 --retry-connrefused http://localhost:8080/contacts/test
      
#     #   - deploy:
#     #       name: Build and push Docker image
#     #       command: |
#     #         TAG="0.1.${CIRCLE_BUILD_NUM}"
#     #         docker build -t $DOCKER_LOGIN/dockertest-pipeline-backend:$TAG .
#     #         docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
#     #         docker push $DOCKER_LOGIN/dockertest-pipeline-backend:$TAG
